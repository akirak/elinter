* emacs-package-checker
[[https://github.com/akirak/emacs-package-checker/workflows/CI/badge.svg?branch=v1][https://github.com/akirak/emacs-package-checker/workflows/CI/badge.svg?branch=v1]]

Emacs Package Checker lets you quickly configure typical linters (i.e. package-lint, byte-compile, and checkdoc) for your Emacs package.

Emacs Package Checker is not any more capable than those existing solutions, but it is based on [[https://nixos.org/nix/][Nix]] package manager and runs tests in a pure, sandboxed environment.
This is useful for testing Emacs packages on local machines.
There are existing solutions in this field like [[https://github.com/vermiculus/emake.el][emake.el]], [[https://gitlab.petton.fr/DamienCassou/makel][makel]], and [[https://github.com/alphapapa/makem.sh][makem.sh]].
** Configuration for a single package
First you have to create a configuration file in your package repository.
The recommended file name is =default.nix=, but it can be any name with =.nix= suffix.

The following is an example from [[https://github.com/akirak/poly-vue][poly-vue]] package:

#+begin_src nix
  { pkgs ? import <nixpkgs> {},
    emacs ? (import (pkgs.fetchFromGitHub {
      owner = "purcell";
      repo = "nix-emacs-ci";
      rev = "53e8f05a66addd520e1feec23eabd6a8a86ee47f";
      # date = 2019-12-12T10:37:15+13:00;
      sha256 = "0v524dsckbhn0y3ywj7dd1a74p6mi7gqz7xdpkzy3l8c2pvpy1sy";
    })).emacs-25-2
  }:
  let
    check-package = import (builtins.fetchTarball "https://github.com/akirak/emacs-package-checker/archive/v1.tar.gz");
  in check-package {
    inherit emacs pkgs;
    name = "emacs-poly-vue";
    src = ./.;
    targetFiles = ["poly-vue.el"];
    emacsPackages = epkgs: (with epkgs.melpaPackages; [
      polymode
    ]);
  }
#+end_src

- An optional argument =emacs= is the Emacs package in [[https://github.com/NixOS/nixpkgs/][nixpkgs]] used to byte-compile Emacs Lisp files. For details, refer to [[https://nixos.org/nixos/manual/index.html#module-services-emacs-releases][a subsection in NixOS manual]].
- =rev= must be the hash of this repository.
- =name= can be any string accepted as a file name. It is used as part of directory names.
- =src= should point to the directory containing Emacs Lisp files.
- =targetFiles= is a list of Emacs Lisp files to check.
- =emacsPackages= is a function that returns a list of Emacs Lisp packages required to build the Emacs Lisp files in =targetFiles=.
  This should be done [[https://nixos.org/nixos/manual/index.html#module-services-emacs-adding-packages][as in NixOS]].
*** Checking the package locally
If the name of the configuration file is =default.nix=, you can check the package with the following command:

#+begin_src shell
  # Run checkdoc
  nix-build --no-out-link --quiet -A checkdoc
  # Byte-compile
  nix-build --no-out-link --quiet -A byte-compile
  # Package-lint
  nix-shell --pure --quiet -A package-lint
  # Buttercup
  nix-shell --pure --quiet -A buttercup
#+end_src

- =checkdoc= and =byte-compile= can be run in =nix-build=, but =package-lint= must be run in =nix-shell=. This is because 
  =package-lint= requires an internet connection to check if packages are installable, but =nix-build= forbidden that.
- =--no-out-link= is need to prevent =nix-build= from creating =result= directory in the repository.
- When =--pure= is given as an argument, =nix-shell= runs the command in a sandbox.
- =--quiet= flag suppress messages related to Nix.

If you have set =NIX_BUILD_SHELL= environment variable to something like =zsh=, you may have to unset it temporarily when you run =nix-shell=.

If the file name is something other than =default.nix=, then you have to append the file name to each command line.
*** GitHub Actions
Create =.github/workflows/test.yml= like this:

#+begin_src yaml
  name: CI

  on:
    push:
      paths-ignore:
      - '**/*.md'
      - '**/*.org'

  jobs:
    build:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          emacs-version:
            - emacs-25-1
            - emacs-26-1
            - emacs-26-3
      steps:
      - name: install nix
        uses: cachix/install-nix-action@v5
      - name: install cachix
        run: nix-env -iA cachix -f https://cachix.org/api/v1/install
      - name: enable cachix for emacs-ci
        run: cachix use emacs-ci
      - name: check if nix is installed
        run: nix-env --version
      - uses: actions/checkout@v1
      - run: nix-channel --add https://github.com/purcell/nix-emacs-ci/archive/master.tar.gz emacs-ci
      - run: nix-channel --update
      - name: Run tests
        run: |
          set -e
          nix-build --arg emacs "(import <emacs-ci>).${{ matrix.emacs-version }}" -A byte-compile --no-out-link --quiet
          nix-build --arg emacs "(import <emacs-ci>).${{ matrix.emacs-version }}" -A checkdoc --no-out-link --quiet
          nix-shell --arg emacs "(import <emacs-ci>).${{ matrix.emacs-version }}" -A package-lint --pure --quiet
          nix-shell --arg emacs "(import <emacs-ci>).${{ matrix.emacs-version }}" -A buttercup-lint --pure --quiet

#+end_src
** License
GPL v3
