* elinter
This is a complete rewrite of my Emacs Lisp package checker, formerly called =emacs-package-checker= or =melpa-check=. It is still currently at an alpha stage.

** Table of contents
:PROPERTIES:
:TOC:      siblings
:END:
-  [[#design-goals][Design goals]]
-  [[#planned-features-65][Planned features [65%]â€‹]]
-  [[#prerequisites][Prerequisites]]
-  [[#installation][Installation]]
-  [[#usage][Usage]]
  -  [[#use-case-1-local-source--in-repository-recipes][Use case #1: Local source + in-repository recipes]]
  -  [[#use-case-2-local-recipes--remote-sources][Use case #2: Local recipes + remote sources]]
  -  [[#use-case-3-github-workflow-for-individial-packages][Use case #3: GitHub workflow for individial packages]]
  -  [[#use-case-4-github-workflow-for-batch-linting-your-packages-on-melpa][Use case #4: GitHub workflow for batch-linting your packages on MELPA]]
  -  [[#use-case-5-git-pre-commit-hook][Use case #5: Git pre-commit hook]]
-  [[#technical-details][Technical details]]
  -  [[#elinter-command][elinter command]]
  -  [[#emacs-version-syntax][Emacs version syntax]]
  -  [[#sandboxing][Sandboxing]]
-  [[#credits-inspiration-sources-and-alternatives][Credits, inspiration sources, and alternatives]]

** Design goals
This project is designed with the following goals in mind:

- Support both local use and CI
- Comprehensive linting using various backends (should be at least as capable as [[https://github.com/riscy/melpazoid/][melpazoid]], which is created and used by the official reviewer on [[https://melpa.org/#/][MELPA]])
- Use [[https://nixos.org/][Nix]] to support dependencies that involve specific build procedures and/or native dependencies, e.g. =emacsql-sqlite=
- Support projects containing multiple packages in the same repository
- Allow ease of setup for new projects and ease of migration for existing projects, e.g. from Cask
- Minimal configuration and minimal maintenance
- Can be integrated into the PR workflow of MELPA
** Planned features [65%]
The following is a list of features that should be supported by this project.
Maybe I'll announce this project officially when the progress reaches around 80%.

Linting (the list mostly extracted from [[https://github.com/alphapapa/makem.sh][makem.sh]] + inspiration from [[https://github.com/gonewest818/elisp-lint][elisp-lint]]):

- [X] checkdoc
- [X] [[https://github.com/purcell/package-lint/][package-lint]]
- [X] check-declare
- [X] [[https://github.com/riscy/melpazoid/][melpazoid]] (sharp quotes and other experimental checks)
- [ ] [[https://github.com/emacs-elsa/Elsa][ELSA]]
- [ ] indentation
- [ ] regular expressions
- [ ] whitespace

Building packages:

- [X] Byte-compile
- [X] Loadability testing
- [X] Produce a package with =*-autoloads.el= file

Testing:

- [X] [[https://github.com/jorgenschaefer/emacs-buttercup/][buttercup]]
- [X] [[https://github.com/jorgenschaefer/emacs-buttercup/][ert-runner]]
- [ ] ert with given test files
- [X] Run any command in an environment with packages under test

Target project types:

- [X] Multi-file packages
- [ ] Multi-package repositories
- [ ] Source files in subdirectories

Sources:

- [X] Local repository
- [X] Remote source repositories

Configuration:

- [X] Allow specifying an Emacs version available in [[https://github.com/purcell/nix-emacs-ci/][nix-emacs-ci]]
- [X] Determine Emacs versions based on the library headers of individual packages
- [X] Read development dependencies (used for testing) from =Cask= file
- [ ] Allow defining custom Nix package derivations
- [ ] Allow updating Nix dependencies (including [[https://github.com/nix-community/emacs-overlay/][emacs-overlay]]) locally
- [ ] Switch to [[https://github.com/NixOS/rfcs/pull/49][Nix flakes]]

Integration:

- [X] CLI for local use
- [X] Git pre-commit hook (run static checks only on modified files)
- [X] GitHub Actions

Reporting:

- [X] Colorizing statuses
- [X] Produce groups on GitHub Actions
- [ ] Produce annotations that point to concrete error locations on GitHub Actions
** Prerequisites
=elinter= runs on UNIX-like operating systems that can run [[https://nixos.org/][Nix]] (currently Linux and macOS).
** Installation
=elinter= depends on Nix, so you have to install Nix first:

#+begin_src sh
bash <(curl -L https://nixos.org/nix/install)
#+end_src

=elinter= can be installed using Nix:

#+begin_src sh
nix-env -if https://github.com/akirak/elinter/archive/v4.tar.gz -A main
#+end_src

Alternatively, you can clone this repository and run

#+begin_src sh
nix-env -iA main
#+end_src

Optionally, it is recommended to install [[https://github.com/cachix/cachix][cachix]] and enable cached Emacs binaries:

#+begin_src sh
cachix use emacs-ci
#+end_src

Optionally, you can use [[https://github.com/xzfc/cached-nix-shell][cached-nix-shell]] for improving =nix-shell= startup time.
Install the program in =PATH=, and =elinter= will automatically detect it.
** Usage
*** Use case #1: Local source + in-repository recipes
First create package recipes in =.recipes= directory.
The recipe format is [[https://github.com/melpa/melpa/#recipe-format][the same as you would create for MELPA]], and each file should define exactly one package.

You can use =elinter.el,= which is included in this project, to copy existing recipes from your local copy of MELPA.
First set =elinter-recipes-dir= to the =recipes= directory inside MELPA, and then use =elinter= interactive function.
It scans source files in the repository, import package recipes, and run lint on source files.

The below describes command line usage but also applies to =elinter= command inside Emacs.

Without arguments, it lints and compiles source files in the repository:

#+begin_src sh
elinter
#+end_src

To enable experimental checks by [[https://github.com/riscy/melpazoid/][melpazoid]] which you would receive on MELPA PRs, add =--experimental= flag:

#+begin_src sh
elinter --experimental
#+end_src

With =--buttercup= or =--ert-runner= flag, it also runs tests:

#+begin_src sh
elinter --buttercup
#+end_src

To only lint packages and prevent from byte-compiling, add =-l= flag:

#+begin_src sh
elinter -l
#+end_src

To only byte-compile source files, add =-b= flag:

#+begin_src sh
elinter -b
#+end_src

To only run tests, run it with =-t= along with the =--buttercup=, =--ert-runner=, etc.:

#+begin_src sh
elinter -t --buttercup
#+end_src
*** Use case #2: Local recipes + remote sources
This is like the use case 1, but it clones the remote repository specified in the recipe rather than work on source files in the working directory.

=elinter= command accepts recipe files as arguments. When =-r= flag is given, it clones remote Git repositories according to the recipes.
This can be easily integrated into the MELPA PR workflow:

#+begin_src sh
cd ~/your-melpa-fork
elinter -r recipes/your-package --experimental
#+end_src

The same flags as #1 applies.
*** Use case #3: GitHub workflow for individial packages
This repository also provides a GitHub action for checking individual packages on GitHub.

The following is an example workflow. Create a file in =.github/workflows=. Here is [[https://github.com/akirak/elinter/actions?query=workflow%3A%22Action+CI%22][an example output]].

#+begin_src yaml
  name: CI
  on:
    push:
  jobs:
    ci:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v2
      # Nix is required
      - uses: cachix/install-nix-action@v10
      # Install elinter and run lint and byte-compile
      - uses: akirak/elinter@v4
      # Optional step for running tests
      - name: 'Run buttercup tests with the latest release of Emacs'
        run: elinter -t --buttercup -e latest
#+end_src
*** Use case #4: GitHub workflow for batch-linting your packages on MELPA
Since =elinter= command can take recipe files as arguments and fetch remote repositories, it is possible to add a linting workflow to your copy of [[https://github.com/melpa/melpa][MELPA]].

Here is [[https://github.com/akirak/melpa/blob/internal/.github/workflows/akirak.yml][an example workflow definition]] and [[https://github.com/akirak/melpa/actions?query=workflow%3ACI][output]].
*** Use case #5: Git pre-commit hook
This repository also provides a script that can be integrated into Git =pre-commit= hook.

=elinter-lint-files= script takes elisp source files as arguments and performs linting according to in-repository recipes.
It is provided as =file-linter= attribute from =default.nix=:

#+begin_src sh
# install the script
nix-env -if . -A file-linter
# check source files in your repository
elinter-lint-files hello.el hello-utils.el
#+end_src

You can integrate this script using a Git hooks manager, e.g. [[https://pre-commit.com/][pre-commit]].
If you prefer the Nix way, you can use [[cachix/pre-commit-hooks.nix][cachix/pre-commit-hooks.nix]] to set up a hook as follows:

#+begin_src nix
  with builtins;
  with (import <nixpkgs> {});
  with (import (import ./nix/sources.nix).gitignore { });
  let
    pre-commit-hooks = import (import ./nix/sources.nix)."pre-commit-hooks.nix";

    elinter = import (fetchTarball "https://github.com/akirak/elinter/archive/v4.tar.gz") { };

    pre-commit-check = pre-commit-hooks.run {
      src = gitignoreSource ../.;
      excludes = [ "^nix/sources\.nix$" ];
      hooks = {
        shellcheck.enable = true;
        nix-linter.enable = true;
        nixpkgs-fmt.enable = true;
        elinter = {
          enable = true;
          name = "elinter";
          description = "Lint Emacs Lisp files";
          entry = "${elinter.file-linter}/bin/elinter-lint-files";
          files = "\\.el$";
        };
      };
    };
  in
  mkShell {
    shellHook = pre-commit-check.shellHook;
  }
#+end_src
** Technical details
*** elinter command
The =main= Nix derivation provides =elinter= executable.
It takes recipe files as command line arguments.

It can also take package names and it refers to source files linked from the sandbox (described below).

If no recipe file or package name is given as an argument, it looks for ones in =.recipes= directory in the working directory.
*** Emacs version syntax
=elinter= command supports =-e= option that takes an Emacs version, e.g. =26.3= for Emacs 26.3 and =snapshot= for the latest snapshot. You can use any single version available in nix-emacs-ci.

It also supports the following abstract version specs:

- =min=, the minimum version specified in the library header of each package
- =latest=, the latest stable version
- =all=, all versions since the minimum version including the snapshot, in descending order
*** Sandboxing
=elinter= creates symbolic links in a cache directory and operates on them, rather than lint and compile source files directly in the repository.
This is useful both for simplification and isolation.
Once symbolic links are created, they are reused across different runs for performance.
Since they are symbolic links, file modifications are reflected, but file additions/deletions are not applied.
After you create/delete a source file in the repository, you have to run =elinter= with =-c= arguments to recreate the sandbox:

#+begin_src sh
elinter -c
#+end_src

You can use =-c= with other arguments:

#+begin_src sh
elinter -c -l --experimental
#+end_src
** Credits, inspiration sources, and alternatives
=elinter= was influenced by or depends on the following projects:

- [[https://github.com/nix-community/emacs-overlay/][emacs-overlay]] from the Nix community, its =emacsWithPackagesFromPackageRequires= parser by Steve Purcell, and [[https://github.com/talyz/fromElisp][fromElisp]] parser (used in [[https://github.com/akirak/nix-elisp-helpers][my Nix library]]) by Kim Lindberger
- [[https://github.com/alphapapa/makem.sh][makem.sh]] by Adam Porter (alphapapa), for some of its linting code and the idea of extensive use of bash
- [[https://github.com/riscy/melpazoid/][melpazoid]] by Chris Rayner (riscy), for extra linting features and the idea of sandboxing
- [[https://github.com/conao3/keg.el/][keg.el]] by Naoya Yamashita (conao3), for its recipe-oriented configuration API
- [[https://github.com/DamienCassou/nix-hello-world][nix-hello-world]] by Damien Cassou, for configuring Nix projects
- [[https://gitea.petton.fr/DamienCassou/makel][makel]] by Damien Cassou, for some linting code

=elinter= is an improvement upon the previous version, which was helped by [[https://github.com/ericdallo][Eric Dallo]] and [[https://github.com/terlar][Terje Larsen]].
