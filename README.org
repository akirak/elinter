# -*- mode: org; mode: org-make-toc -*-
* melpa-check
=melpa-check= is a framework for linting and testing Emacs Lisp packages.
It supports running both locally and on CI.
It has a built-in integration with [[https://github.com/purcell/nix-emacs-ci][nix-emacs-ci]] by Steve Purcell, so you can run tests with older versions of Emacs while using the latest version of Emacs for your human tasks, without any workaround.

#+BEGIN_HTML
<a href="https://github.com/akirak/melpa-check/actions"><img alt="Build Status" src="https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fakirak%2Fmelpa-check%2Fbadge%3Fref%3Dv3&style=flat" /></a>
#+END_HTML

It is intended for checking your packages before publishing them to [[https://melpa.org/#/][MELPA]], but this program is not written by any of the authors/maintainers of the service.
** Table of contents
:PROPERTIES:
:TOC:      siblings 
:END:
-  [[#features][Features]]
-  [[#prerequisites][Prerequisites]]
-  [[#quickstart][Quickstart]]
  -  [[#installing-the-emacs-lisp-frontend-and-the-cli][Installing the Emacs Lisp frontend and the CLI.]]
  -  [[#configuring-a-project][Configuring a project]]
  -  [[#running-tests-locally][Running tests locally]]
  -  [[#configuring-github-action][Configuring GitHub Action]]
  -  [[#running-ci-on-github-actions][Running CI on GitHub Actions]]
-  [[#overview][Overview]]
-  [[#usage][Usage]]
  -  [[#configuring-packages][Configuring packages]]
    -  [[#verifying-the-package-configuration][Verifying the package configuration]]
  -  [[#configuring-ci][Configuring CI]]
    -  [[#github-actions][GitHub Actions]]
  -  [[#running-linting-and-testing-locally][Running linting and testing locally]]
    -  [[#cli][CLI]]
      -  [[#linting][Linting]]
      -  [[#byte-compile][Byte-compile]]
      -  [[#testing][Testing]]
      -  [[#all-tasks][All tasks]]
    -  [[#in-emacs][In Emacs]]
  -  [[#updating][Updating]]
    -  [[#updating-melpa-check-in-your-project][Updating melpa-check in your project]]
-  [[#references][References]]
  -  [[#melpa-check-cli][melpa-check CLI]]
    -  [[#emacs-version][Emacs version]]
-  [[#development][Development]]
-  [[#license][License]]

** Features
=melpa-check= is capable of the following features that are not known to be supported by other alternatives:

- Testing multiple packages in a single project/repository.
- Integration with =nix-emacs-ci= which lets you run tests with a specific version of Emacs.
- It even enables you to run tests with all Emacs versions specified by your package without defining a matrix on CI.

The following is a list of currently supported linting/testing backends:

- =checkdoc=
- [[https://github.com/purcell/package-lint][package-lint]]
- =byte-compile=
- [[https://github.com/jorgenschaefer/emacs-buttercup/][buttercup]]

It provides the following features for convenience:

- Interactive configuration from inside Emacs.
- Type-safe package and CI configuration in [[https://github.com/dhall-lang/dhall-lang][Dhall]].
- Command line interface for easily running linting tasks for both local use and on CI.
- [[https://github.com/akirak/emacs-package/][GitHub action]] which provides reproducible installation of the program. =melpa-check= itself is locked in each repository and can be easily updated using [[https://github.com/nmattia/niv][niv]].
** Prerequisites
Since this package heavily relies on the [[https://nixos.org/nix/][Nix]] package manager, you will need to install Nix on your machine, and the operating system must be either Linux or macOS. Windows does not support Nix, but you will be able to use it inside Windows Subsystem for Linux (WSL).

The Emacs frontend requires Emacs 26.1 or later.
For development, you will also require [[https://github.com/nmattia/niv][niv]] for management of Nix dependencies. It is not required on CI.
** Quickstart
*** Installing the Emacs Lisp frontend and the CLI.
=melpa-check= provides an Emacs frontend for configuring your projects.
Like other Emacs packages, clone the repository and load =melpa-check= package:

#+begin_src emacs-lisp
  (use-package melpa-check)
#+end_src

It is also recommended that you install [[https://github.com/psibi/dhall-mode][dhall-mode]] for editing configuration files.
Optionally, you can install and configure [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] to enable type-checking in Dhall.

You also have to install [[https://nixos.org/nix/][Nix]]:

#+begin_src shell
curl -L https://nixos.org/nix/install | sh
#+end_src

and [[https://github.com/nmattia/niv#install][niv]]:

#+begin_src shell
  # Available on master
  nix-env -i niv
#+end_src

You also have to install the command line interface of =melpa-check=.
Run the following command:

#+begin_src shell
  nix-env -iA cli -f https://github.com/akirak/melpa-check/archive/v3.tar.gz
#+end_src
*** Configuring a project
Before you get started with =melpa-check= for your Emacs Lisp project, your source files should be already containing library headers such as =Package-Requires= and =Version=. They are used by =melpa-check= to generate an initial package configuration.

Open a file in your Emacs Lisp project and run =melpa-check-init-project=.

1. If the file is not inside a Git repository, it asks you where is the root directory of your project.
2. It asks you if your project contains multiple Emacs Lisp packages. Answer =n= if you have a single package.
3. It asks you for a directory for configuration files. Answer =y= to select the default (=.melpa-check= in the project root).
4. It lets you select sources files of your first package. Select Emacs Lisp source files. Don't include test files.
5. It enumerates some possible options for your MELPA recipe. Select one or enter it by yourself.
6. If you are configuring a multi-package project in the step 3, you will be asked for source files of the next package (step 4). Repeat until you enter nil.

Now your project contains =nix= and =.melpa-check= directory.
The former contains Nix dependencies including the latest version of =melpa-check=, and the latter contains configuration files for =.melpa-check=.
You can configure your project(s) by editing =packages.dhall= in =.melpa-check= directory.
Its schema is defined in =schema.dhall= in the same directory.
*** Running tests locally
To lint your package locally from inside Emacs, first run =melpa-check-config= to check your package configuration and then run =melpa-check-run-all= command to run all tasks. Both commands utilises =compile= to run =melpa-check= CLI.
*** Configuring GitHub Action
To configure a GitHub Action workflow for your project, run =melpa-check-init-github-action= command in Emacs.
It generates a meta configuration file in =.melpa-check/ci/github.dhall=.

You can add some preferences inside =Actions.MultiFileCiConfig::{...}=

#+begin_src dhall
  let Actions =
        https://raw.githubusercontent.com/akirak/melpa-check/v3/dhall/github-actions.dhall

  let packages = ../packages.dhall

  let config = Actions.MultiFileCiConfig::{
    -- Add your configuration here
  }

  in  Actions.buildMultiFileCiWorkflows config packages
#+end_src

or replace it with =Actions.MultiFileCiConfig.default= to use the default settings:

#+begin_src dhall
  let Actions =
        https://raw.githubusercontent.com/akirak/melpa-check/v3/dhall/github-actions.dhall

  let packages = ../packages.dhall

  let config = Actions.MultiFileCiConfig.default

  in  Actions.buildMultiFileCiWorkflows config packages
#+end_src

After you finish with your Dhall configuration file, run =melpa-check-generate-ci-config=.
It reads all dhall files in =.melpa-check/ci= directory and generates configuration files for continuous integration.
Unless your configuration file contains an error, you will find YAML files in =.github/workflows=, with one file for each package.
*** Running CI on GitHub Actions
Commit all files to the Git repository and push your branch to GitHub.
GitHub Actions run =melpa-check= for each package.

Each package has a separate workflow:

#+begin_html
<img src="https:/jingsi.space/screenshots/melpa-check-1.png">
#+end_html

and each workflow has separate steps for linting and testing:

#+begin_html
<img src="https:/jingsi.space/screenshots/melpa-check-2.png">
#+end_html

You can also have separate CI status badges for packages:

#+begin_html
<img src="https://jingsi.space/screenshots/melpa-check-badge-examples.png">
#+end_html
** Overview
'schem*** Typical project structure
A typical =melpa-check=-enabled Emacs Lisp project has the following structure:

- =.github/workflows/=: Directory containing workflow definitions consumed by GitHub Actions.
  - =PACKAGE.yml=: CI configuration for the package, generated by the Emacs frontend. If you have multiple packages in the repository, there will be a workflow for each package.
- =.melpa-check/=: Directory containing configuration files for =melpa-check=.
  - =ci/=: Directory containing configuration files for CI. Files are written in Dhall, and converted to specific formats supported by each service using the Emacs frontend.
    - =github.dhall=: CI configuration file for GitHub Actions.
  - =packages.dhall=: Package configuration of the project, which is interactively configured at first by the Emacs frontend. Then you can edit it on Emacs.
  - =schema.dhall=: Dhall schema for the package configuration automatically installed by the Emacs frontend. You usually don't edit this file manually.
  - =default.nix=: Nix entry point for the project, which is generated by the Emacs frontend. You usually don't edit this file manually.
- =nix/=: Directory specifying Nix dependencies. Files in this directory are maintained by the =niv= tool, and you usually don't edit them manually.
  - =sources.json=: JSON file specifying individual Nix dependencies.
  - =sources.nix=: Nix file for referencing the dependencies in Nix.
- =PACKAGE.el=: Source file for the package.
- =PACKAGE-test.el=: Optional test file for the package.
- =tests/=: Optional directory containing test files for the package.
- =README=: README for the project. Its format can be Markdown, Org, or whatever you like.
- =CHANGELOG.md==: Optional change log for the project.
- =LICENSE=: Document describing a license for the project.
- =.gitignore=: Configuration file listing files to be ignored by Git.

Of these files and directories, =.github=, =.melpa-check=, and =nix= directories can be generated by =melpa-check=. The other files must be created by yourself.
** Usage
*** Configuring packages
You can configure your packages by editing =.melpa-check/packages.dhall=.
The file specifies a list of packages, and the package type is defined in the schema (=schema.dhall=).
With =lsp-mode= and =dhall-lsp=, the package configuration is checked against the schema.
Also, =dhall-format= provides formatting of the file.

The package type has the following fields:

- =pname= :: Name of the package, as registered on MELPA.
- =version= :: Package version. This should be the same as in =Version= header in the source file.
- =emacsVersion= :: Minimum version of Emacs required by the package, e.g. =25.1=.
- =files= :: Source files of the package. This should be a list of relative paths from the project root.
- =dependencies= :: Emacs Lisp packages required by the package. The packages should be on MELPA or local (i.e. residing in the same project).
- =localDependencies= :: Dependencies defined within the same project. Default: empty.
- =mainFile= :: Main file of the package, i.e. =package-lint-main-file= in =package-lint=. Default: none.
- =buttercupTests= :: Buttercup test files for the package. This is a list of file patterns relative from the project root. It supports =extglob= of =bash=, so =*-test?(s).el= matches both =hello-test.el= and =hello-tests.el=. Default: a sensible default value.
- =recipe= :: MELPA-style recipe of the package. [[https://github.com/melpa/melpa#recipe-format][Syntax]]

You can omit fields that use the default values.

Some notes on the Dhall syntax:

- An empty list requires a type signature, e.g. =[] : List Text=.
- An optional type is either =Some VALUE= (like =Some "melpa-check.el"=) or =None TYPE= (e.g. =None Text=).
**** Verifying the package configuration
While =Dhall= supports syntax checking of the package configuration on the fly, it is not capable of checking against the semantics.

To aid this issue, =melpa-check= provides verification of the package configuration itself.
To check the configuration, run =melpa-check-config= in Emacs or =melpa-check config= command in CLI.
The CLI command must be run at the project root, but the Emacs command can be run at anywhere inside the project.
By running this command before pushing it to remote, you can prevent a failure from a configuration mistake.
This feature is not comprehensive for now, but it can check if the package version is consistent with source files.
*** Configuring CI
=melpa-check= is capable of generating configuration files for CI from Dhall.
It is intended as an extra feature for saving your time.
You can still manually configure CI if you don't like the output produced using this feature, or tweak the output to your liking.

The basic step is as follows:

1. Generate a Dhall configuration file using an Emacs command for a specific service.
2. Edit the configuration file.
3. Generate actual configuration files for the service using =melpa-check-generate-ci-config=. This reads all files in =.melpa-check/ci= directory.

Only GitHub Actions is supported at present.
**** GitHub Actions
=melpa-check-init-github-actions= generates a configuration file for GitHub Actions.
The file name is =.melpa-check/ci/github.dhall=.
It depends on emacs-lisp action created by the same author.

All of the fields have defaults, so you don't need any configuration.
To omit all fields, use =MultiFileCiConfig.default= as the entire value.

It consists of =lint= and =test= steps. The former runs =checkdoc= and =package-lint=, and the latter =byte-compile= and buttercup tests.

=MultiFileCiConfig=, which generates one workflow for each package, has the following fields:

- =triggers= :: Events that triger the workflow. Actually it is a function that takes a package as an argument. Default: on =push= event, ignoring Markdown and Org files.
- =lintOn= :: Operating systems where lint is run. Default: =ubuntu-latest=.
- =lintEmacsVersion= :: Emacs version with which lint is run. Default: latest release.
- =testOn= :: Operating systems where tests are run. Default: =ubuntu-latest=.
- =testEmacsVersion= :: Emacs version with which tests are run. Default: all versions since the minimum version of the package.
- =fileNameFn= :: Function that determines the workflow file name. Default: the package name.
- =actionnameFn= :: Function that determines the file name. Default: the package name + " CI".
- =skipTests= :: If =True=, don't include tests in the test step. Only =byte-compile= is run. Default: =False=.
*** Running linting and testing locally
You can run tests by either running a CLI command at the project root or running an Emacs command at any directory inside the project.
**** CLI
Except for =all= command, all of these commands require a package name as an argument if there are multiple packages in the project. If you have only one package, you can omit the package name.

If there is an error, it returns a non-zero exit code.

Then can take an option =-e VERSION= where VERSION specifies an Emacs version.
The version can be either concrete (i.e. a specific release like =26.1=) or abstract (like the latest release).
***** Linting
=melpa-check lint PACKAGE= command runs =checkdoc= and =package-lint=.
***** Byte-compile
=melpa-check byte-compile PACKAGE= command byte-compiles the package.
***** Testing
=melpa-check buttercup PACKAGE= command runs buttercup tests.
***** All tasks
=melpa-check all= command runs all tasks on all packages in the project.
This is convenient for checking the entire project before publishing it to a remote repository.
**** In Emacs
=melpa-check-run-all= command is a wrapper around the =melpa-check all= CLI command, which runs all tasks on all packages.
*** Updating
**** Updating melpa-check in your project
=melpa-check= is version-locked in each project.
Unless there is an API/schema change, you can update it to the latest version by running =niv= in the project:

#+begin_src shell
  niv update melpa-check
#+end_src
** References
*** melpa-check CLI
**** Emacs version
As well all =snapshot= and all concrete release versions supported by =nix-emacs-ci=, =melpa-check= CLI command supports the following abstract versions:

- =minimum= :: Minimum version specified in the package configuration.
- =latest= :: Latest stable release, i.e. a maximum version before =snapshot=.
- =all= :: All versions since =minimum=.

It is recommended that you use either =latest= or =snapshot= for linting, because it includes the latest version of =checkdoc=.
Emacs versions before =25.1= cause an error in linting in =melpa-check=.

=all= is recommended for =byte-compile= and tests in CI, but you might prefer =minimum= in local tests for faster run.
** Development
Any feedback and PR is welcome.

=melpa-check= is a polyglot project written in several languages:

- Its core is written in Nix, which is a purely functional lazy language for building systems.
- The CLI is written in PureScript, which a statically typed functional language targetting JavaScript.
- The Emacs frontend is written in Emacs Lisp.
- Package configuration and CI configuration are written in Dhall, which is a statically typed configuration language without turing completeness.
- Bash is used for shell scripting in the Nix and PureScript parts.
- The GitHub action in a separate repository is written in TypeScript and wraps =nix= and =melpa-check= commands.
** License
GPL v3
