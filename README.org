* elinter
This is a complete rewrite of my Emacs Lisp package checker, formerly called =emacs-package-checker= or =melpa-check=. It is still currently at an alpha stage.
** Design goals
This project is designed with the following goals in mind:

- Support both local use and CI
- Comprehensive linting using various backends (should be at least as capable as melpazoid, which is created and used by the official reviewer on MELPA)
- Using Nix to support dependencies that entail specific build procedures, e.g. =emacsql-sqlite=
- Support projects containing multiple packages in a single repository
- Ease of setup for new projects and ease of migration, e.g. from Cask, in existing projects
- Minimal configuration and minimal maintenance
- Can be integrated into the PR workflow of MELPA
** Planned features [67%]
The following is a list of features that should be supported by this project.
Maybe I'll announce this project officially when the progress reaches around 80%.

Linting (the list mostly extracted from [[https://github.com/alphapapa/makem.sh][makem.sh]] + inspiration from [[https://github.com/gonewest818/elisp-lint][elisp-lint]]):

- [X] checkdoc
- [X] package-lint
- [X] check-declare
- [X] melpazoid (sharp quotes and other experimental checks)
- [ ] ELSA
- [ ] indentation
- [ ] regular expressions
- [ ] whitespace

Building packages:

- [X] Byte-compile
- [X] Loadability testing
- [X] Produce a package with =*-autoloads.el= file

Testing:

- [X] buttercup
- [X] ert-runner
- [ ] ert with given test files
- [X] Run any command in an environment with packages under test

Target project types:

- [X] Multi-file packages
- [ ] Multi-package repositories
- [ ] Source files in subdirectories

Sources:

- [X] Local repository
- [X] Remote source repositories

Configuration:

- [X] Allow specifying an Emacs version available in =nix-emacs-ci=
- [X] Determine Emacs versions based on the library headers of individual packages
- [X] Activate extra packages listed in =Cask= file
- [ ] Allow defining custom Nix derivations of packages for testing
- [ ] Allow updating Nix dependencies locally
- [ ] Switch to Nix flakes

Integration:

- [X] CLI for local use
- [X] Git pre-commit hook (run static checks only on modified files)
- [X] GitHub Actions

Reporting:

- [X] Colorizing statuses
- [X] Produce groups on GitHub Actions
** Prerequisites
=elinter= runs on UNIX-like operating systems that can run [[https://nixos.org/][Nix]] (currently Linux and macOS).
** Installation
=elinter= depends on Nix, so you have to install Nix first:

#+begin_src sh
bash <(curl -L https://nixos.org/nix/install)
#+end_src

=elinter= can be installed using Nix:

#+begin_src sh
nix-env -if https://github.com/akirak/elinter/archive/v4.tar.gz -A main
#+end_src

Alternatively, you can clone this repository and run

#+begin_src sh
nix-env -iA main
#+end_src

Optionally, it is recommended to install [[https://github.com/cachix/cachix][cachix]] and enable cached Emacs binaries:

#+begin_src sh
cachix use emacs-ci
#+end_src

Optionally, you can use [[https://github.com/xzfc/cached-nix-shell][cached-nix-shell]] for improving =nix-shell= startup time.
Install the program in =PATH=, and =elinter= will automatically detect it.
** Usage
*** Use case #1: Local source + in-repository recipes
First create package recipes in =.recipes= directory.
You can use [[https://github.com/akirak/decask.el][decask.el]] to copy existing recipes from a local copy of MELPA.

Then run the following command to lint and compile source files in the repository:

#+begin_src sh
elinter
#+end_src

To perform extra checks from [[https://github.com/riscy/melpazoid/][melpazoid]] as done in PR reviews on MELPA, add =--experimental= flag:

#+begin_src sh
elinter --experimental
#+end_src

To only lint packages and prevent from byte-compiling, add =-l= flag:

#+begin_src sh
elinter -l
#+end_src

To only byte-compile source files, add =-b= flag:

#+begin_src sh
elinter -b
#+end_src
*** Use case #2: Local recipes + remote sources
This is like the use case 1, but it clones the remote repository specified in the recipe rather than work on source files in the working directory.

=elinter= command accepts recipe files as arguments. When =-r= flag is given, it clones remote Git repositories according to the recipes.
This can be easily integrated into the MELPA PR workflow:

#+begin_src sh
cd ~/your-melpa-fork
elinter -r recipes/your-package
#+end_src
** Technical details
*** elinter command
The =main= Nix derivation provides =elinter= executable.
It takes recipe files as command-line arguments.
If no recipe file is given as an argument, it looks for ones in =.recipes= directory in the working directory.
*** Emacs version syntax
=elinter= command supports =-e= option that takes an Emacs version, e.g. =26.3= for Emacs 26.3 and =snapshot= for the latest snapshot. You can use any single version available in nix-emacs-ci.

It also supports the following abstract version specs:

- =min=, the minimum version specified in the library header of each package
- =latest=, the latest stable version
- =all=, all versions since the minimum version including the snapshot, in descending order
** Credits, inspiration sources, and alternatives
=elinter= is influenced by or using code from the following projects:

- [[https://github.com/nix-community/emacs-overlay/][emacs-overlay]] from the Nix community, its =emacsWithPackagesFromPackageRequires= parser by Steve Purcell, and [[https://github.com/talyz/fromElisp][fromElisp]] parser by Kim Lindberger (used in [[https://github.com/akirak/nix-elisp-helpers][my Nix library]]).
- [[https://github.com/alphapapa/makem.sh][makem.sh]] by Adam Porter (alphapapa), for some of its linting code and the idea of extensive use of bash
- [[https://github.com/riscy/melpazoid/][melpazoid]] by Chris Rayner (riscy), for extra linting features and the idea of sandboxing
- [[https://github.com/conao3/keg.el/][keg.el]] by Naoya Yamashita (conao3), for its recipe-oriented configuration API
- [[https://github.com/DamienCassou/nix-hello-world][nix-hello-world]] by Damien Cassou, for configuring Nix projects
- [[https://gitea.petton.fr/DamienCassou/makel][makel]] by Damien Cassou, for some linting code

=elinter= is an improvement upon the previous version, which was helped by [[https://github.com/ericdallo][Eric Dallo]] and [[https://github.com/terlar][Terje Larsen]].
