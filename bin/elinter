#!/usr/bin/env bash

set -euo pipefail

####################
# Set the defaults #
####################

# Set the directory for storing cache files.
#
# This directory contains an image of individual packages.
cache_dir="$PWD/.elinter-cache"

# Set the configuration for storing configuration files.
#
# Configuration files are mostly about Nix, e.g. the lock file
if [[ -v ELINTER_CONFIG_ROOT ]]; then
  config_dir="${ELINTER_CONFIG_ROOT}"
else
  # Fall back to XDG
  # TODO: Set a user configuration directory for Darwin
  config_dir="${XDG_CONFIG_HOME:-$HOME/.config}/elinter"
fi

# The current set of Nix packages
user_nix_sources="${config_dir}/nix/sources.nix"

# Where package source files (actually symlinks) are stored
package_source_root="${cache_dir}/pkg"
# package_output_root="${cache_dir}/pkg-out"

# Directory containing recipes
recipes_dir=${ELINTER_RECIPES_DIR:-.recipes}

###################################
# Read the command line arguments #
###################################

# Initialize variables used inside this script
op=default_check
recipes=()
packages=()
unset cleanup
unset remote
unset test_engine
# Cask setting is empty by default, but it is still interpreted as 1
unset use_cask
unset cask_file
unset niv_update
unset git_hook
# Configure the linters from the environment variable
if [[ -v ELINTER_LINTERS ]]; then
  mapfile -d' ' -t linters <<<"${ELINTER_LINTERS}"
  # shellcheck disable=SC2206
  linters=(${linters[*]})
else
  # This variable value should be replaced with a literal string to
  # the default linter set using substituteInPlace function of Nix.
  #
  # shellcheck disable=SC2206
  linters=(${lintersAsString})
fi

usage() {
  # Follow the style in docopt http://docopt.org/
  cat <<HELP
Usage: elinter [options] <recipe>...

Options:
  -l             Do only linting (skip byte-compile)
  -b             Do only byte-compile (skip linting)
  -t|--test      Run only tests
  -c             Clean up cache before operation
  -s             Enter a shell with the packages
  --experimental Turn on experimental checks (using melpazoid)
  -B|--buttercup Run buttercup tests
  -E|--ert-runner Run ert-runner tests
  --ert          Run ert tests defined in files
  -e|--emacs VERSION
                 Set the Emacs version
  -r             Fetch the source code from a remote server
  --cask         Detect Cask file and use packages defined in it (default)
  --no-cask      Don't use cask file
  -u|--update    Update Nix dependencies (e.g. emacs-overlay)
  -g             Install pre-commit Git hook
  -V, --version  Show version
HELP
}

version() {
  echo "elinter version ${ELINTER_VERSION:?Unknown version}"
}

# TODO: Use enhanced getopt to parse command line arguments
# See https://gist.github.com/hoylen/6607180 for example

# Loop arguments until it becomes empty
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      usage
      exit
      ;;
    -V|--version)
      version
      exit
      ;;
    -r)
      remote=1
      ;;
    -c|--clean)
      cleanup=1
      ;;
    -e|--emacs)
      EMACS_VERSION="$2"
      shift
      ;;
    -b|--compile)
      op=compile
      ;;
    -l|--lint)
      op=lint
      ;;
    -t|--test)
      op="test"
      ;;
    -s|--shell)
      op=shell
      ;;
    -B|--buttercup)
      test_engine=buttercup
      ;;
    -E|--ert-runner)
      test_engine=ert-runner
      ;;
    --ert)
      test_engine=ert
      ;;
    --experimental)
      linters+=(melpazoid)
      ;;
    --cask)
      use_cask=1
      ;;
    --no-cask)
      use_cask=0
      ;;
    -u|--update)
      niv_update=(emacs-overlay nix-emacs-ci melpazoid)
      ;;
    -g)
      git_hook=1
      ;;
    --)
      # Keep the rest of the arguments as positional arguments
      shift
      break
      ;;
    *)
      if [[ -f "$1" ]]; then
        recipes+=("$1")
      elif [[ -d "${package_source_root}/$1" ]]; then
        packages+=("$1")
      else
        echo "Unsupported arg or missing file: $1" >&2
        exit 1
      fi
      ;;
  esac
  shift
done

#############
# Functions #
#############

# Update the user Nix sources.json
#
# Names of the sources should be given as arguments.
update_niv_sources() {
  local targets=("$@")

  # If sources.nix does not exist in the user directory,
  # first copy the bundled version.
  if ! [[ -f "${user_nix_sources}" ]]; then
    echo "Installing sources to ${config_dir}..."
    mkdir -p "${config_dir}/nix"
    cp -n -t "${config_dir}/nix" \
       "share/nix/sources.json" "share/nix/sources.nix"
    chmod ug+w "${config_dir}/nix/sources.nix" "${config_dir}/nix/sources.json"
  fi

  if ! command -v niv >/dev/null; then
    echo "Niv is not installed in PATH." >&2
    exit 1
  fi

  echo "Updating Nix dependencies: ${targets[*]}..."

  local initial_dir="$PWD"
  cd "${config_dir}"
  for dep in "${targets[@]}"; do
    niv update "$dep"
  done
  cd "${initial_dir}"
}

# Install pre-commit Git hook
install_git_hook() {
  if ! [[ -d .git ]]; then
    ansi --red --bold \
         "When you add this flag, please run elinter at a Git repository root." >&2
    return 1
  fi

  if [[ -f ".git/hooks/pre-commit" ]]; then
    ansi --red "pre-commit hook is already installed in the repository." >&2
    return 0
  fi

  nix-shell -p pre-commit --run "pre-commit install"

  if [[ -f ".pre-commit-config.yaml" ]]; then
    ansi --red "There is already .pre-commit-config.yaml in the repository. " >&2
    ansi --red "If you want to replace it, you have to remove the existing one." >&2
  else
    cp "share/.pre-commit-config.yaml" .
    chmod u+w .pre-commit-config.yaml
  fi
}

# Discover recipes from `recipes_dir` and set file names in recipes
# variable.
discover_recipes() {
  echo "Looking for recipes in ${recipes_dir}..."
  shopt -s nullglob
  mapfile -t recipes <<<"${recipes_dir}/*"
  # Fill the gap
  # If the file name contain spaces, it may fail
  # shellcheck disable=SC2206
  recipes=(${recipes[*]})

  if [[ ${#recipes[*]} -eq 0 ]]; then
    echo "No recipe file was found." >&2
    echo "You have to specify at least one recipe file or put it in ${recipes_dir}." >&2
    exit 1
  else
    echo "Found ${recipes[*]}"
  fi
}

cleanup_cache() {
  echo "Cleaning up the cache directory..."
  rm -rf "${cache_dir}"
}

# Copy package source files to the cache directory.
#
# Recipe files should be given in `recipes` variable.
# 
# Unless the packages are from remote sources, you should also start
# from the repository root.
#
# This actually creates symlinks to minimize updates on source
# modification.
#
# If files are added/removed, you have to clean the cache.
copy_package_sources() {
  local recipe_file
  echo "Linking package source files..."
  # Ensure the root of the package cache
  mkdir -p "${package_source_root}"
  initialdir="$(pwd)"
  # Operate on each package recipe
  for f in ${recipes[*]}; do
    echo "Linking package source files for recipe ${f} ..."
    # Use the base name of the recipe file as the package name
    package=$(basename "$f")
    # Convert to an absolute path
    if [[ "$f" = /* ]]; then
      recipe_file="$(readlink -f "$f")"
    else
      recipe_file="$(readlink -f "$initialdir/$f")"
    fi
    # Add to a list of package names
    packages+=("$package")
    src="$initialdir"
    cd "${package_source_root}"
    if [[ -v remote && $remote = 1 ]]; then
      # When using remote source
      #
      # Clean up the source every time
      rm -rf "$package"
      src=$(nix-instantiate --eval --strict \
              "share/nix/fetchSource.nix" \
              --argstr recipeFile "${recipe_file}" | tr -d \")
    elif [[ -d "$package" ]]; then
      # If there is an existing cache for the package, print the
      # information and skip linking.
      # 
      # You can ensure linking by explicitly purging all existing
      # package cache.
      #
      # TODO: Check for updates in the working tree
      echo
      echo "Reusing the previous settings for $package:"
      ls "$package"
      continue
    fi
    # Generate a script for linking source files using Nix
    instruction=$(nix-build "share/nix/copySource.nix" \
            --no-out-link --quiet --no-build-output \
            --argstr recipeFile "${recipe_file}" --argstr src "$src")
    mkdir "$package"
    cd "${package_source_root}/$package"
    # Run the script to link source files
    # shellcheck disable=SC1090
    . "$instruction"
    # Print the information
    echo
    echo "Package: $package"
    # shellcheck disable=SC2001
    sed 's/^/> /' "${recipe_file}"
    echo -n "Files: "
    ls
  done
  # Restore the working directory
  cd "$initialdir"
}

# Run linting operation on each package.
#
# Target packages should be given in `packages` variable, and the
# packages should be already cached. The cache should contain an
# environment file '.elinter-env' for individual packages.
#
# This function is intended for running static linting.
# For testing, see `run_tests`
# 
# It supports a hook system to alter the behavior.
run_lint_and_compile() {
  # Errors are allowed inside this function, but the return code will
  # be set to 1.
  set +e
  local r
  # Track a list of failed packages
  local failed_packages=()
  if [[ ${#packages[*]} -gt 1 ]]; then
    multi_packages=1
  else
    multi_packages=0
  fi
  local commands
  case "$op" in
    default_check)
      commands='["elinter-run-linters" "elinter-byte-compile"]'
      ;;
    lint)
      commands='["elinter-run-linters"]'
      ;;
    compile)
      commands='["elinter-byte-compile"]'
      ;;
  esac
  initialdir="$PWD"
  for package in ${packages[*]}; do
    r=0

    # shellcheck disable=SC2157
    if [[ -v ELINTER_BEFORE_PACKAGE_HOOK && -n "${ELINTER_BEFORE_PACKAGE_HOOK}" ]]; then
      ${ELINTER_BEFORE_PACKAGE_HOOK}
    fi

    ansi --blue --bold "On package $package:"

    cd "${package_source_root}/$package"
    workflow_start_group "Install dependencies for the package"
    emacs_dev_shell_for_lint --argstr target "$package"
    workflow_end_group

    if ! emacs_dev_shell_for_lint --argstr target "$package" \
         --arg commands "$commands"; then
      r=1
      failed_packages+=("$package")
    fi

    if [[ $r -eq 0 ]]; then
      if [[ -v ELINTER_PACKAGE_SUCCESS_HOOK && -n "${ELINTER_PACKAGE_SUCCESS_HOOK}" ]]; then
        ${ELINTER_PACKAGE_SUCCESS_HOOK}
      fi
    else
      ansi --red "Package $package failed on some checks."
      echo
      if [[ -v ELINTER_PACKAGE_FAILURE_HOOK && -n "${ELINTER_PACKAGE_FAILURE_HOOK}" ]]; then
        ${ELINTER_PACKAGE_FAILURE_HOOK}
      fi
    fi

    if [[ -v ELINTER_AFTER_PACKAGE_HOOK && -n "${ELINTER_AFTER_PACKAGE_HOOK}" ]]; then
      # shellcheck disable=SC2090
      ${ELINTER_AFTER_PACKAGE_HOOK}
    fi

    # Insert an empty line between packages
    gh_workflow_p && echo
  done
  if [[ ${#failed_packages[*]} -eq 0 ]]; then
    ansi --green "All checks were successful."
  else
    ansi --red "Some checks failed."
    if [[ ${multi_packages} -gt 0 ]]; then
      echo "Failed packages: ${failed_packages[*]}"
    fi
  fi
  cd "$initialdir"
  return $r
}

# Run a command in a linting environment for a specific package.
#
# This should be called inside `for_each_package_sources`.
emacs_dev_shell() {
  "${ELINTER_NIX_SHELL}" "share/nix/driver.nix" \
                     --arg pkgRoot "${package_source_root}" \
                     --argstr emacsVersions "${EMACS_VERSION:-latest}" \
                     "$@" \
                     --run exit
}

emacs_dev_shell_for_lint() {
  emacs_dev_shell "-A" lint --argstr linters "${linters[*]}" "$@"
}

emacs_dev_shell_for_test() {
  local command="$1"
  shift
  local nix_args=()
  if [[ -v cask_file ]]; then
    nix_args+=("--argstr" "caskFile" "${cask_file}")
  fi

  echo "Command to run:"
  echo "> $command"

  # shellcheck disable=SC2086
  if ! workflow_with_group "Install dependencies for tests" \
       emacs_dev_shell -A test ${nix_args[*]} "$@"; then
    return 1
  fi

  # shellcheck disable=SC2086
  workflow_with_group "Run tests" \
                      emacs_dev_shell -A test ${nix_args[*]} "$@" \
                      --arg commands "[\"$command\"]"
}

# Run tests based on `test_engine` variable.
run_tests() {
  ansi --blue --bold "Tests: ${test_engine}"
  case "${test_engine}" in
    buttercup)
      emacs_dev_shell_for_test \
        "emacs -Q --batch -l buttercup -f buttercup-run-discover $PWD" \
        --arg extraPackReqs '["buttercup"]'
      # Below it the ideal way to run buttercup, but it fails due to
      # missing site-start.el.
      #
      # Actually, site-start.el doesn't exist in the Emacs derivation,
      # so -Q option is necessary.
      # I will need a further investigation.
      #
      # --arg extraBuildInputs "import share/nix/buttercup.nix" \
        # --argstr command "buttercup $PWD"
      ;;
    ert-runner)
      emacs_dev_shell_for_test \
        "emacs -Q --batch -l ert-runner" \
        --arg extraPackReqs '["ert-runner"]'
      ;;
    ert)
      # Extra arguments passed to elinter command are loaded in the
      # Emacs session.
      local emacs_args=()
      for arg; do
        emacs_args+=("-l" "$arg")
      done
      # ert is a built-in package, so extraPackReqs is unnecessary
      emacs_dev_shell_for_test \
        "emacs -Q --batch -l ert ${emacs_args[*]} -f ert-run-tests-batch-and-exit"
      ;;
  esac
}

setup_github_workflow_annotations() {
  mkdir -p "${cache_dir}"
  # Lint and byte-compile errors are saved to this file
  export ELINTER_LOG_FILE="$PWD/elinter.log"

  export ELINTER_BEFORE_PACKAGE_HOOK="touch ${ELINTER_LOG_FILE}"
  export ELINTER_AFTER_PACKAGE_HOOK="rm -f ${ELINTER_LOG_FILE}"
  # Produce errors on a package
  export ELINTER_PACKAGE_FAILURE_HOOK="elinter-github-logger"
}

####################
# Main entry point #
####################

# The order matters here, so don't reorder them carelessly.

# Load functions related GitHub Actions from share/workflow.bash in
# this repository.
# The path should be replaced with an absolute path using
# substituteInPlace function of Nix.
# 
# shellcheck disable=SC1091
. 'share/workflow.bash'

workflow_start_group "Initialization"

if [[ -v GITHUB_ACTIONS ]]; then
  # Force setting TERM to enable color output
  export TERM=ansi
fi

# Source "ansi" script to load "ansi" function.
# 'ansi/ansi' should be replaced with an absolute path using
# substituteInPlace function of Nix.
# 
# shellcheck disable=SC1091
. 'share/ansi'

if ELINTER_NIX_SHELL="$(command -v cached-nix-shell)"; then
  echo "Using cached-nix-shell"
  echo
else
  ELINTER_NIX_SHELL=nix-shell
fi
export ELINTER_NIX_SHELL

if [[ -v cleanup && $cleanup = 1 ]]; then
  cleanup_cache
  echo
fi

if [[ -v niv_update ]]; then
  update_niv_sources "${niv_update[@]}"
fi
if [[ -f "${user_nix_sources}" ]]; then
  echo "Using Nix sources maintained by the user"
fi

# This should be run after the possible update of dependencies.
if [[ -v git_hook && "${git_hook}" = 1 ]]; then
  install_git_hook
fi

# For most operations, at least one recipe is mandatory
if [[ ${#recipes[*]} -eq 0 && ${#packages[*]} -eq 0 ]]; then
  discover_recipes
  echo
fi

# Link package sources defined within the recipes
if [[ ${#recipes[*]} -gt 0 ]]; then
  copy_package_sources
fi

export ELINTER_LINTERS="${linters[*]}"

if ! [[ -v use_cask && "${use_cask}" = 0 ]]; then
  if [[ -f Cask ]]; then
    cask_file="$(readlink -f Cask)"
  elif [[ -v use_cask && "${use_cask}" = 1 ]]; then
    echo "WARNING: Cask option is set, but no Cask file is found."
  fi
fi

# Enable features that are specific to GitHub Actions
if [[ -v GITHUB_ACTIONS && "${GITHUB_ACTIONS}" = true ]]; then
  # Allow preventing annotations by setting ELINTER_NO_ANNOTATE_GITHUB
  # e.g. for testing error cases
  if [[ ! -v ELINTER_NO_ANNOTATE_GITHUB ]]; then
    setup_github_workflow_annotations
  fi
fi

workflow_end_group

case "$op" in
  default_check)
    r=0
    run_lint_and_compile || r=1
    if [[ -v test_engine ]]; then
      run_tests "$@" || r=1
    fi
    exit $r
    ;;
  lint|compile)
    run_lint_and_compile
    exit $?
    ;;
  test)
    run_tests "$@"
    exit $?
    ;;
  # This feature is disable for now.
  # shell)
  #   if [[ $# -eq 0 ]]; then
  #     shell_with_all_packages
  #   else
  #     shell_with_all_packages --command "$*"
  #   fi
  #   ;;
  *)
    echo "Unsupported operation: $op" >&2
    exit 2
    ;;
esac
