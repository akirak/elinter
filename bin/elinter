#!/usr/bin/env bash

set -e

####################
# Set the defaults #
####################

os_cache_root() {
  # read variables from the command line
  case "$OSTYPE" in
    linux-gnu*)
      echo "${XDG_CACHE_HOME:-$HOME/.cache}"
      ;;
    darwin*)
      echo "$HOME/Library/Caches"
      ;;
  esac
}

nix_lib_dir="${ELINTER_NIX_LIB_DIR:?Cannot be empty}"

# Directory for storing cache files
cache_dir="${ELINTER_CACHE_ROOT:-$(os_cache_root)/elinter}"

# config_dir="${XDG_CONFIG_HOME:-$HOME/.config}/elinter"

# Directory containing niv nix directory
# niv_root="${ELINTER_NIV_ROOT:-${config_dir}}"

package_source_root="${cache_dir}/pkg-src"
# package_output_root="${cache_dir}/pkg-out"

# Directory containing recipes
recipes_dir=${ELINTER_RECIPES_DIR:-.recipes}

###################################
# Read the command line arguments #
###################################

# Initialize variables
op=default_check
recipes=()
packages=()
unset cleanup
unset remote
unset test_engine
# Cask setting is empty by default, but it is still interpreted as 1
unset cask
unset cask_file
if [[ -v ELINTER_LINTERS ]]; then
  mapfile -d' ' -t linters <<<"${ELINTER_LINTERS}"
  # shellcheck disable=SC2206
  linters=(${linters[*]})
else
  linters=(package-lint checkdoc check-declare)
fi

usage() {
  # Follow the style in docopt https://docopt.org/
  cat <<HELP
Usage: elinter [options] <recipe>...

Options:
  -l             Do only linting (skip byte-compile)
  -b             Do only byte-compile (skip linting)
  -t|--test      Run only tests
  -c             Clean up cache before operation
  -s             Enter a shell with the packages
  --experimental Turn on experimental checks (using melpazoid)
  -B|--buttercup Run buttercup tests
  -E|--ert-runner Run ert-runner tests
  -e|--emacs VERSION
                 Set the Emacs version
  -r             Fetch the source code from a remote server
  --cask         Detect Cask file and use packages defined in it (default)
  --no-cask      Don't use cask file
  -V, --version  Show version
HELP
}

version() {
  echo "elinter version ${ELINTER_VERSION:?Unknown version}"
}

# TODO: Use enhanced getopt to parse command line arguments
# See https://gist.github.com/hoylen/6607180 for example

# Loop arguments until it becomes empty
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      usage
      exit
      ;;
    -V|--version)
      version
      exit
      ;;
    -r)
      remote=1
      ;;
    -c|--clean)
      cleanup=1
      ;;
    -e|--emacs)
      EMACS_VERSION="$2"
      shift
      ;;
    -b|--compile)
      op=compile
      ;;
    -l|--lint)
      op=lint
      ;;
    -t|--test)
      op="test"
      ;;
    -s|--shell)
      op=shell
      ;;
    -B|--buttercup)
      test_engine=buttercup
      ;;
    -E|--ert-runner)
      test_engine=ert-runner
      ;;
    --experimental)
      linters+=(melpazoid)
      ;;
    --cask)
      use_cask=1
      ;;
    --no-cask)
      use_cask=0
      ;;
    --)
      # Keep the rest of the arguments as positional arguments
      shift
      break
      ;;
    *)
      if [[ -f "$1" ]]; then
        recipes+=("$1")
      elif [[ -d "${package_source_root}/$1" ]]; then
        packages+=("$1")
      else
        echo "Unsupported arg or missing file: $1" >&2
        exit 1
      fi
      ;;
  esac
  shift
done

#############
# Functions #
#############

emacs_versions() {
  case "${EMACS_VERSION}" in
    min|latest|all)
      nix-instantiate --eval --strict \
        --arg elispFile "./${PACKAGE_MAIN_FILE}" \
        --argstr spec "${EMACS_VERSION}" \
        "${nix_lib_dir}/dynamicVersions.nix" \
        | tr '"[]' '   '
      ;;
    '')
      echo .
      ;;
    *)
      echo "${EMACS_VERSION}"
      ;;
  esac
}

set_emacs() {
  case "${emacs_version}" in
    ''|.)
      emacs=emacs
      return
      ;;
    snapshot)
      emacs="emacs-snapshot"
      ;;
    *)
      if [[ "${emacs_version}" =~ ^[[:digit:]]+\.[[:digit:]]$ ]]; then
        emacs="emacs-${emacs_version/./-}"
      else
        echo "Unsupported Emacs version: ${emacs_version}" >&2
        exit 1
      fi
      ;;
  esac
  ansi --yellow "Using $emacs"
  # Reset the installation state when the Emacs version changes
  packages_installed=0
}

discover_recipes() {
  echo "Looking for recipes in ${recipes_dir}..."
  shopt -s nullglob
  mapfile -t recipes <<<"${recipes_dir}/*"
  # Fill the gap
  # If the file name contain spaces, it may fail
  # shellcheck disable=SC2206
  recipes=(${recipes[*]})

  if [[ ${#recipes[*]} -eq 0 ]]; then
    echo "No recipe file was found." >&2
    echo "You have to specify at least one recipe file or put it in ${recipes_dir}." >&2
    exit 1
  else
    echo "Found ${recipes[*]}"
  fi
}

cleanup_cache() {
  echo "Cleaning up the cache directory..."
  rm -rf "${package_source_root}"
}

copy_package_sources() {
  echo "Linking package source files..."
  mkdir -p "${package_source_root}"
  initialdir="$(pwd)"
  for f in ${recipes[*]}; do
    package=$(basename "$f")
    recipe="$(cat "$initialdir/$f")"
    packages+=("$package")
    src="$initialdir"
    cd "${package_source_root}"
    if [[ -v remote && $remote = 1 ]]; then
      # Clean up the source every time
      rm -rf "$package"
      src=$(nix-instantiate --eval --strict \
              "${nix_lib_dir}/fetchSource.nix" \
              --argstr recipe "$recipe" | tr -d \")
    elif [[ -d "$package" ]]; then
      # TODO: Check for updates in the working tree
      echo
      echo "Reusing the previous settings for $package:"
      ls "$package"
      continue
    fi
    instruction=$(nix-build "${nix_lib_dir}/copySource.nix" \
            --no-out-link --quiet --no-build-output \
            --argstr recipe "$recipe" --argstr src "$src")
    mkdir "$package"
    cd "${package_source_root}/$package"
    # shellcheck disable=SC1090
    . "$instruction"
    echo
    echo "Package: $package"
    # shellcheck disable=SC2001
    echo "${recipe}" | sed 's/^/> /'
    echo -n "Files: "
    ls
  done
  cd "$initialdir"
}

for_each_package_sources() {
  set +e
  local r=0
  local failed_packages=()
  if [[ ${#packages[*]} -gt 1 ]]; then
    multi_packages=1
  else
    multi_packages=0
  fi
  for package in ${packages[*]}; do
    # Fork a subshell to isolate the environment, e.g. variables
    if ! (
      r=0
      cd "${package_source_root}/$package"
      # shellcheck disable=SC1091
      source .elinter-env

      ansi --blue --bold "On package ${PACKAGE_NAME}:"
      for emacs_version in $(emacs_versions); do
        set_emacs
        # shellcheck disable=SC2048
        if ! $*; then
          r=1
          # Skip the following versions if any error occurs
          break
        fi
      done

      exit $r
      ); then
      ansi --red "Package $package failed on some checks."
      r=1
      failed_packages+=("$package")
    fi
    # Insert an empty line between packages
    gh_workflow_p && echo
  done
  if [[ $r -eq 0 ]]; then
    ansi --green "All checks were successful."
  else
    ansi --red "Some checks failed."
    if [[ ${multi_packages} -gt 0 ]]; then
      echo "Failed packages: ${failed_packages[*]}"
    fi
  fi
  return $r
}

emacs_dev_shell() {
  "${nix_shell_bin}" "${nix_lib_dir}/emacs.nix" -A shellForCI \
          --argstr emacs "$emacs" \
          --argstr mainFile "$(pwd)/${PACKAGE_MAIN_FILE}" \
          --argstr enabledLinters "${linters[*]}" \
          "$@"
}

install_package_deps() {
  if ! [[ -v packages_installed && "${packages_installed}" = 1 ]]; then
    workflow_start_group "Install dependencies for the package"
    emacs_dev_shell --run exit
    workflow_end_group
    packages_installed=1
  fi
}

lint_package() {
  install_package_deps
  workflow_with_group "Lint" emacs_dev_shell --run elinter-run-linters
}

compile_package() {
  install_package_deps
  emacs_dev_shell --run elinter-byte-compile
}

lint_and_compile_package() {
  local r=0
  lint_package || r=1
  compile_package || r=1
  return $r
}

shell_with_packages() {
  local loadpath=()
  local mainfiles=()
  initialdir="$PWD"
  for package in ${packages[*]}; do
    unset PACKAGE_NAME
    unset PACKAGE_FILES
    unset PACKAGE_ELISP_FILES
    unset PACKAGE_MAIN_FILE
    cd "${package_source_root}/$package"
    # shellcheck disable=SC1091
    source .elinter-env
    loadpath+=("$PWD")
    mainfiles+=("$(readlink -e "${PACKAGE_MAIN_FILE}")")
  done
  cd "$initialdir"
  emacs_version="${EMACS_VERSION}"
  set_emacs
  "${nix_shell_bin}" "${nix_lib_dir}/emacsTest.nix" \
          --argstr emacs "$emacs" \
          --argstr loadPath "${loadpath[*]@Q}" \
          --argstr mainFiles "${mainfiles[*]@Q}" \
          "$@"
}

run_tests() {
  ansi --blue --bold "Tests"
  case "${test_engine}" in
    buttercup)
      shell_with_packages --arg extraPackReqs '["buttercup"]' \
          --arg extraBuildInputs "import ${nix_lib_dir}/buttercup.nix" \
          --argstr caskFile "${cask_file}" \
          --pure --run "buttercup $*"
      ;;
    ert-runner)
      shell_with_packages --arg extraPackReqs '["ert-runner"]' \
          --argstr caskFile "${cask_file}" \
          --pure --run "emacs -Q --batch -l ert-runner"
      ;;
  esac
}

####################
# Main entry point #
####################

workflow_start_group "Initialization"

if [[ -v GITHUB_ACTIONS ]]; then
  # Force setting TERM to enable color output
  export TERM=ansi
fi

if [[ -v ELINTER_ANSI_LIBRARY && -f "${ELINTER_ANSI_LIBRARY}" ]]; then
  # shellcheck disable=SC1090
  . "${ELINTER_ANSI_LIBRARY}"
else
  ansi() {
    while [[ $# -gt 0 && "$1" = --* ]]; do
      shift
    done
    echo "$*"
  }
fi

if nix_shell_bin="$(command -v cached-nix-shell)"; then
  echo "Using cached-nix-shell"
  echo
else
  nix_shell_bin=nix-shell
fi

if [[ -v cleanup && $cleanup = 1 ]]; then
  cleanup_cache
  echo
fi

# For most operations, at least one recipe is mandatory
if [[ ${#recipes} -eq 0 && ${#packages} -eq 0 ]]; then
  discover_recipes
  echo
fi

if [[ ${#recipes} -gt 0 ]]; then
  copy_package_sources
fi

export ELINTER_LINTERS="${linters[*]}"

if ! [[ -v use_cask && "${use_cask}" = 0 ]]; then
  if [[ -f Cask ]]; then
    cask_file="$(readlink -f Cask)"
  elif [[ "${use_cask}" = 1 ]]; then
    echo "WARNING: Cask option is set, but no Cask file is found."
  fi
fi

workflow_end_group

case "$op" in
  default_check)
    r=0
    for_each_package_sources lint_and_compile_package || r=1
    if [[ -v test_engine ]]; then
      workflow_start_group "Run tests"
      run_tests "$@" || r=1
      workflow_end_group
    fi
    exit $r
    ;;
  lint)
    for_each_package_sources lint_package
    exit $?
    ;;
  compile)
    for_each_package_sources compile_package
    exit $?
    ;;
  test)
    run_tests "$@"
    exit $?
    ;;
  shell)
    if [[ $# -eq 0 ]]; then
      shell_with_packages
    else
      shell_with_packages --command "$*"
    fi
    ;;
  *)
    echo "Unsupported operation: $op" >&2
    exit 2
    ;;
esac
