#!/usr/bin/env bash

# This logic is based on makel:
# <https://gitlab.petton.fr/DamienCassou/makel/blob/master/makel.mk>

unset outdir
outdir="${ELINTER_COMPILE_OUTDIR}"

while [[ $# -gt 0 ]]; do
  case "$1" in
    -o)
      if [[ $# -gt 1 ]]; then
        outdir="$2"
        shift
      fi
      ;;
  esac
  shift
done

result=0

rm -f ./*.elc

# Clean up on exit
initialdir="$PWD"
extra_cleanup_files=()
cleanup() {
  cd "$initialdir"
  rm -f ./*.elc "${extra_cleanup_files[*]}"
}
trap cleanup 0 1 2 6 15

for f in ${PACKAGE_ELISP_FILES[*]}; do
  echo "Compiling $f..."
  if ! emacs --batch --no-site-file -L . \
      --eval "(setq byte-compile-error-on-warn t)" \
      --funcall batch-byte-compile "$f"
  then
    result=1
    # Add a blank line after the error message
    echo
  fi
done

if [[ $result -eq 0 ]]; then
  echo SUCCESS
else
  echo FAIL
fi

set -e

unset dest
if [[ $result -eq 0 && -v outdir && -n "${outdir}" ]]; then
  echo
  # Generate autoloads
  autoloads_file="${PACKAGE_NAME}-autoloads.el"
  if [[ ! -f "${autoloads_file}" ]]; then
    extra_cleanup_files+=("${autoloads_file}")
    emacs --batch -Q -l package --eval \
      "(package-generate-autoloads \"${PACKAGE_NAME}\" default-directory)"
  fi

  # Obtain the major version of Emacs used to build the package
  emacs --batch -Q --eval \
     "(with-temp-buffer
         (insert (number-to-string emacs-major-version))
         (write-region (point-min) (point-max) \".elinter-emacs-version\"))"
  major_version="$(cat .elinter-emacs-version)"
  rm .elinter-emacs-version

  # Transfer artifacts
  dest="$outdir/${major_version}/${PACKAGE_NAME}"
  if command -v rsync >/dev/null; then
    echo "Using rsync to copy the artifacts"
    mkdir -p "$dest"
    rsync -rL . "$dest"
  else
    mkdir -p "$dest"
    rm -rf "$dest"
    cp -Lr . "$dest"
  fi

  # .envrc is created for elinter, so it should be deleted
  rm "$dest/.envrc"

  echo "Installed to $outdir/${major_version}"
fi

# Loadability testing, inspired by melpazoid
# TODO: Make loadability testing optional
if [[ $result -eq 0 ]]; then
  echo
  echo "Perform loadability testing..."
  set +e
  if [[ -v dest && -d "$dest" ]]; then
    cd "$dest"
  fi
  for f in *.elc; do
    echo "Loading $f..."
    if ! emacs --batch -Q -L . -l "$f"; then
      result=1
    fi
  done
  if [[ $result -eq 0 ]]; then
    echo OK
  fi
fi

exit $result
